package compilador;

import java_cup.runtime.*;
import java.util.*;
import compilador.ast.*;

/* Prelúdio (código Java a ser incluído na classe Parser) */
parser code {: 


    // Método para reportar erros sintáticos
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Erro Sintático");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" na linha " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", coluna " + (s.right + 1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
   
    // Método para reportar erros fatais (interrompe a compilação)
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Erro Sintático Fatal");
    }
:};




/* Declaração de Terminais */
// Keywords
terminal IF, ELSE, WHILE, RETURN, INT, FLOAT, VOID, PRINT;
// Identificadores e Literais
terminal String ID;
terminal Integer INTEGER_LITERAL;
terminal Float FLOAT_LITERAL;
terminal String STRING_LITERAL;
// Operadores
terminal PLUS, MINUS, TIMES, DIV, ASSIGN, EQ, NEQ, LT, GT, LTE, GTE;
// Delimitadores
terminal SEMI, COMMA, LPAREN, RPAREN, LBRACE, RBRACE;
// Símbolo para precedência do dangling else
terminal LOWER_THAN_ELSE;

/* Declaração de Não-Terminais */
non terminal program; 
non terminal declaration_list, declaration;
non terminal var_declaration, type_specifier, fun_declaration;
non terminal params, param_list, param;
non terminal compound_stmt, local_declarations, statement_list, statement;
non terminal expression_stmt, selection_stmt, iteration_stmt, return_stmt, print_stmt;
non terminal ASTNode expression, var, simple_expression, additive_expression, term, factor, relational_op, add_op, mul_op;
non terminal call, args, arg_list;

/* Precedência e Associatividade dos Operadores */
precedence left LT, LTE, GT, GTE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right ASSIGN;
precedence nonassoc LOWER_THAN_ELSE; // Para conflito if-then (dangling else)
precedence nonassoc ELSE; // Para conflito if-then-else

/* Gramática */
start with program;

program ::= declaration_list;

declaration_list ::= declaration_list declaration | declaration;

declaration ::= var_declaration | fun_declaration;

type_specifier ::= INT | FLOAT | VOID;

var_declaration ::= type_specifier ID SEMI {: System.out.println("Reconhecido: Declaração de variável simples (sem inicialização)"); :} 
                | type_specifier ID ASSIGN expression SEMI {: System.out.println("Reconhecido: Declaração de variável com inicialização"); :}
                // | type_specifier ID LBRACKET INTEGER_LITERAL RBRACKET SEMI // Exemplo para array, não pedido explicitamente
                ;

fun_declaration ::= type_specifier ID:id_name LPAREN params RPAREN compound_stmt {: System.out.println("Reconhecido: Definição de função " + id_name); :};

params ::= VOID | param_list | /* empty */ ;

param_list ::= param_list COMMA param | param;

param ::= type_specifier ID;

compound_stmt ::= LBRACE local_declarations statement_list RBRACE;

local_declarations ::= local_declarations var_declaration | /* empty */ ;

statement_list ::= statement_list statement | /* empty */ ;

statement ::= expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | print_stmt;

expression_stmt ::= expression SEMI | SEMI;

selection_stmt ::= IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE
                 // %prec IFX // Tratamento de dangling else
                 | IF LPAREN expression RPAREN statement ELSE statement;

iteration_stmt ::= WHILE LPAREN expression RPAREN statement;

return_stmt ::= RETURN SEMI | RETURN expression SEMI;

print_stmt ::= PRINT LPAREN expression RPAREN SEMI {: System.out.println("Reconhecido: Comando print"); :};

expression ::= var ASSIGN expression | simple_expression;

var ::= ID;
      // | ID LBRACKET expression RBRACKET // Exemplo para acesso a array

simple_expression ::= additive_expression | additive_expression relational_op additive_expression;

relational_op ::= LT | LTE | GT | GTE | EQ | NEQ;

additive_expression ::= additive_expression add_op term | term;

add_op ::= PLUS | MINUS;

term ::= term mul_op factor | factor;

mul_op ::= TIMES | DIV;

factor ::= LPAREN expression RPAREN | var | call | INTEGER_LITERAL | FLOAT_LITERAL | STRING_LITERAL;

call ::= ID LPAREN args RPAREN;

args ::= arg_list | /* empty */ ;

arg_list ::= arg_list COMMA expression | expression;


additive_expression ::= additive_expression:e1 PLUS term:e2
    {: RESULT = new BinOpNode("+", e1, e2); :;}
  | additive_expression:e1 MINUS term:e2
    {: RESULT = new BinOpNode("-", e1, e2); :;}
  | term:e
    {: RESULT = e; :;}
  ;


factor ::= INTEGER_LITERAL:n
    {: RESULT = new LiteralNode(n.toString()); :;}
  | LPAREN expression:e RPAREN
    {: RESULT = e; :;}
  ;


